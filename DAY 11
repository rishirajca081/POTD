QUESTION 1.)
Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

 

Example 1:

Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]

class Solution {
    public void duplicateZeros(int[] arr) {
        int arr1[]=new int[2*arr.length];
        int count=0;
     for(int i=0;i<arr.length;i++){
         if(arr[i]!=0){
             arr1[count]=arr[i];
             //arr1[count+1]=0;
             count++;  
         }
         else
         {
             arr1[count]=0;
             arr1[count++]=0;
             count++;
         }
     }
     /*for(int i=0;i<arr1.length;i++){
         System.out.print(arr1[i]+" ");
     }*/
     for(int i=0;i<arr.length;i++){
         arr[i]=arr1[i];
     }
    }
}
QUESTION 2.)
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set=new HashSet<>();
        int count=0;
        for(int i=0;i<nums1.length;i++){
            for(int j=0;j<nums2.length;j++){
                if(nums1[i]==nums2[j])
                set.add(nums1[i]);
            }
        }
        int arr[]=new int[set.size()];
        int count2=0;
        for( int i : set){
            arr[count2]=i;
            count2++;
        }
        return arr;
    }
}
